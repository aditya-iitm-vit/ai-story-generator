import React, { useState } from 'react';
import { BookOpen, Sparkles, Download, Loader2, PenTool } from 'lucide-react';
import { generateStory } from '../services/geminiApi';
import { StoryRequest, StoryResponse } from '../types/story';

const genres = [
  { value: 'science fiction', label: 'Science Fiction', icon: 'üöÄ' },
  { value: 'fantasy', label: 'Fantasy', icon: 'üßô‚Äç‚ôÇÔ∏è' },
  { value: 'mystery', label: 'Mystery', icon: 'üîç' },
  { value: 'romance', label: 'Romance', icon: 'üíï' },
  { value: 'horror', label: 'Horror', icon: 'üëª' },
  { value: 'drama', label: 'Drama', icon: 'üé≠' },
  { value: 'adventure', label: 'Adventure', icon: 'üó∫Ô∏è' },
  { value: 'thriller', label: 'Thriller', icon: '‚ö°' },
];

const lengths = [
  { value: 'short', label: 'Short Story', description: '300-500 words' },
  { value: 'medium', label: 'Medium Story', description: '700-1000 words' },
  { value: 'long', label: 'Long Story', description: '1200-1800 words' },
];

export default function StoryGenerator() {
  const [prompt, setPrompt] = useState('');
  const [genre, setGenre] = useState('science fiction');
  const [length, setLength] = useState('medium');
  const [story, setStory] = useState<StoryResponse | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim()) return;

    setIsGenerating(true);
    setError(null);
    setStory(null);

    try {
      const request: StoryRequest = {
        prompt: prompt.trim(),
        genre,
        length,
      };

      const response = await generateStory(request);
      setStory(response);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unexpected error occurred');
    } finally {
      setIsGenerating(false);
    }
  };

  const downloadStory = () => {
    if (!story) return;

    const content = `${story.text}\n\n---\nGenerated by AI Story Generator\nPrompt: ${prompt}\nGenre: ${genre}\nLength: ${length}`;
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `story-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 py-8 px-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="p-3 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-full">
              <BookOpen className="w-8 h-8 text-white" />
            </div>
            <h1 className="text-4xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
              AI Story Generator
            </h1>
          </div>
          <p className="text-gray-600 text-lg max-w-2xl mx-auto">
            Transform your imagination into captivating stories. Simply describe your idea, and watch AI bring it to life with creativity and flair.
          </p>
        </div>

        {/* Story Generator Form */}
        <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl p-8 mb-8 border border-white/20">
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Prompt Input */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-3 flex items-center gap-2">
                <PenTool className="w-4 h-4" />
                Your Story Prompt
              </label>
              <textarea
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                placeholder="Enter your story idea... (e.g., 'A robot gains consciousness in a future war' or 'A lost dog finds its way home across the country')"
                className="w-full h-32 px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-none transition-all duration-200 placeholder-gray-400"
                required
              />
            </div>

            {/* Genre Selection */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-3">
                Genre
              </label>
              <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
                {genres.map((g) => (
                  <button
                    key={g.value}
                    type="button"
                    onClick={() => setGenre(g.value)}
                    className={`p-3 rounded-xl border-2 transition-all duration-200 text-sm font-medium ${
                      genre === g.value
                        ? 'border-indigo-500 bg-indigo-50 text-indigo-700'
                        : 'border-gray-200 hover:border-gray-300 text-gray-700'
                    }`}
                  >
                    <div className="text-lg mb-1">{g.icon}</div>
                    {g.label}
                  </button>
                ))}
              </div>
            </div>

            {/* Length Selection */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-3">
                Story Length
              </label>
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
                {lengths.map((l) => (
                  <button
                    key={l.value}
                    type="button"
                    onClick={() => setLength(l.value)}
                    className={`p-4 rounded-xl border-2 transition-all duration-200 text-center ${
                      length === l.value
                        ? 'border-indigo-500 bg-indigo-50 text-indigo-700'
                        : 'border-gray-200 hover:border-gray-300 text-gray-700'
                    }`}
                  >
                    <div className="font-semibold">{l.label}</div>
                    <div className="text-sm opacity-75">{l.description}</div>
                  </button>
                ))}
              </div>
            </div>

            {/* Generate Button */}
            <button
              type="submit"
              disabled={isGenerating || !prompt.trim()}
              className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-4 px-6 rounded-xl font-semibold text-lg transition-all duration-200 hover:from-indigo-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-3"
            >
              {isGenerating ? (
                <>
                  <Loader2 className="w-5 h-5 animate-spin" />
                  Crafting Your Story...
                </>
              ) : (
                <>
                  <Sparkles className="w-5 h-5" />
                  Generate Story
                </>
              )}
            </button>
          </form>
        </div>

        {/* Error Message */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-xl p-4 mb-8">
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 bg-red-500 rounded-full"></div>
              <p className="text-red-700 font-medium">Error</p>
            </div>
            <p className="text-red-600 mt-1">{error}</p>
          </div>
        )}

        {/* Generated Story */}
        {story && (
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl p-8 border border-white/20">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-gray-800 flex items-center gap-2">
                <BookOpen className="w-6 h-6 text-indigo-600" />
                Your Generated Story
              </h2>
              <button
                onClick={downloadStory}
                className="flex items-center gap-2 px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors duration-200"
              >
                <Download className="w-4 h-4" />
                Download
              </button>
            </div>
            
            <div className="prose prose-gray max-w-none">
              <div className="bg-gray-50 rounded-xl p-6 leading-relaxed text-gray-800 whitespace-pre-wrap">
                {story.text}
              </div>
            </div>

            <div className="mt-6 pt-4 border-t border-gray-200 flex flex-wrap gap-4 text-sm text-gray-600">
              <div className="flex items-center gap-2">
                <span className="font-medium">Genre:</span>
                <span className="capitalize">{genre}</span>
              </div>
              <div className="flex items-center gap-2">
                <span className="font-medium">Length:</span>
                <span className="capitalize">{length}</span>
              </div>
              <div className="flex items-center gap-2">
                <span className="font-medium">Words:</span>
                <span>{story.text.split(' ').length.toLocaleString()}</span>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}